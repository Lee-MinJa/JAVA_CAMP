package com.example.demo.member;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.example.demo.PrBoard.PrBoardController;

	@Controller
	@RequestMapping("/member/*")
	public class MemberController {
	Logger logger = LogManager.getLogger(MemberController.class);

		@Autowired
		private MemberLogic memberLogic = null;
		
		@Autowired
		private BCryptPasswordEncoder bCryptPasswordEncoder = null;  
		
		@GetMapping("memberList")
		public ModelAndView memberList(@RequestParam Map<String,Object> pMap, Model model ) {
			logger.info("MemberList 호출 성공");
			logger.info("사용자가 입력한 정보 ==> "+pMap);
			List<Map<String,Object>> memberList = null;
			memberList = memberLogic.memberList(pMap);
			model.addAttribute("memberList", memberList);
			return new ModelAndView("/member/memberList");
		}
		
		@GetMapping("memberLogin")
		public ModelAndView memberLogin(@RequestParam Map<String,Object> pMap, Model model, HttpSession session ) {
			logger.info("MemberLogin 호출 성공");
			logger.info("사용자가 입력한 정보 ==> "+pMap);
			List<Map<String,Object>> memberList = null;
			memberList = memberLogic.memberList(pMap);
			model.addAttribute("memberList", memberList);
			
			session.setAttribute("mem_id",memberList.get(0).get("MEM_ID").toString());
			session.setAttribute("mem_nick",memberList.get(0).get("MEM_NICK").toString());
			return new ModelAndView("/member/memberList");
		}
		
		@GetMapping("/loginForm")
		public String loginForm() {
			return "loginForm";
		}
		
		@PostMapping("/loginAction")
		public String loginAction(@RequestParam Map<String,Object>pMap, HttpSession session) {
				
				Map<String, Object> rmap = null;
				rmap = memberLogic.loginAction(pMap);
				session.setAttribute("smem_name", rmap.get("MEM_NAME"));
				session.setAttribute("smem_id", rmap.get("MEM_ID"));
				return "redirect:index.jsp";
		}
		@PostMapping("/proc_login")
		public String proc_login(@RequestParam Map<String,Object>pMap, HttpSession session) {
			
			Map<String, Object> rmap = null;
			String path = "";
			rmap = memberLogic.proc_login(pMap);
			String mem_name = rmap.get("mem_name").toString();
			if(("아이디가 존재하지 않습니다.".equals(mem_name))
				||("비밀번호가 틀립니다.".equals(mem_name))) {
				session.setAttribute("smsg", mem_name);
				path = "loginFail.jsp";
			}
			else {
				session.setAttribute("smem_name", mem_name);
				session.setAttribute("smem_id", rmap.get("mem_id"));
				path = "index.jsp";
			}
			return "redirect:"+path;
		}
		@GetMapping("/memberShip")
		public String memberShip() {
			return "memberShip";
		}
		
		
		@PostMapping("/memberInsert")
		public String memberInsert(@RequestParam Map<String,Object> pMap) {
			logger.info("pMap : "+pMap);
			int result = 0;
			String rawPassword = null;
			if(pMap.get("password").toString() != null) {
				rawPassword = pMap.get("password").toString();
				
			}
			String encPassword = bCryptPasswordEncoder.encode(rawPassword);
			pMap.put("password", encPassword);
			
			result=memberLogic.memberInsert(pMap);
			return "redirect:index.jsp";
		}
		@GetMapping("/userInfo")
		public @ResponseBody String userInfo(@RequestParam Map<String,Object>pMap, HttpSession session) {
			String mem_id = (String)session.getAttribute("mem_id");
			String mem_nick = (String)session.getAttribute("mem_nick");
			
			return "세션이름: "+ mem_id + ", 세션 아이디: "+mem_nick;
		}
		
		
//		@GetMapping("/userInfo")
//		public @ResponseBody String userInfo(@AuthenticationPrincipal PrincipalDetails mVO) {
//			logger.info("username : " +mVO.getUsername());
//			logger.info("password : " +mVO.getPassword());
//			return "세션이름: "+ mVO.getUsername() + ", 세션 아이디: "+mVO.getMem_id();
//		}
		
}
